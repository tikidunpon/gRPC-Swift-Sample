//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: helloworld.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Greeter_GreeterSayHelloCall: ClientCallUnary {}

fileprivate final class Greeter_GreeterSayHelloCallBase: ClientCallUnaryBase<Greeter_HelloRequest, Greeter_HelloResponse>, Greeter_GreeterSayHelloCall {
  override class var method: String { return "/greeter.Greeter/SayHello" }
}

internal protocol Greeter_GreeterSayHelloBiCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Greeter_HelloResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Greeter_HelloResponse?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Greeter_HelloRequest, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Greeter_HelloRequest, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

internal extension Greeter_GreeterSayHelloBiCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Greeter_HelloResponse? { return try self._receive(timeout: timeout) }
}

internal extension Greeter_GreeterSayHelloBiCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Greeter_HelloRequest, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Greeter_GreeterSayHelloBiCallBase: ClientCallBidirectionalStreamingBase<Greeter_HelloRequest, Greeter_HelloResponse>, Greeter_GreeterSayHelloBiCall {
  override class var method: String { return "/greeter.Greeter/SayHelloBi" }
}

class Greeter_GreeterSayHelloBiCallTestStub: ClientCallBidirectionalStreamingTestStub<Greeter_HelloRequest, Greeter_HelloResponse>, Greeter_GreeterSayHelloBiCall {
  override class var method: String { return "/greeter.Greeter/SayHelloBi" }
}


/// Instantiate Greeter_GreeterServiceClient, then call methods of this protocol to make API calls.
internal protocol Greeter_GreeterService: ServiceClient {
  /// Synchronous. Unary.
  func sayHello(_ request: Greeter_HelloRequest) throws -> Greeter_HelloResponse
  /// Asynchronous. Unary.
  func sayHello(_ request: Greeter_HelloRequest, completion: @escaping (Greeter_HelloResponse?, CallResult) -> Void) throws -> Greeter_GreeterSayHelloCall

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func sayHelloBi(completion: ((CallResult) -> Void)?) throws -> Greeter_GreeterSayHelloBiCall

}

internal final class Greeter_GreeterServiceClient: ServiceClientBase, Greeter_GreeterService {
  /// Synchronous. Unary.
  internal func sayHello(_ request: Greeter_HelloRequest) throws -> Greeter_HelloResponse {
    return try Greeter_GreeterSayHelloCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func sayHello(_ request: Greeter_HelloRequest, completion: @escaping (Greeter_HelloResponse?, CallResult) -> Void) throws -> Greeter_GreeterSayHelloCall {
    return try Greeter_GreeterSayHelloCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  internal func sayHelloBi(completion: ((CallResult) -> Void)?) throws -> Greeter_GreeterSayHelloBiCall {
    return try Greeter_GreeterSayHelloBiCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

}

class Greeter_GreeterServiceTestStub: ServiceClientTestStubBase, Greeter_GreeterService {
  var sayHelloRequests: [Greeter_HelloRequest] = []
  var sayHelloResponses: [Greeter_HelloResponse] = []
  func sayHello(_ request: Greeter_HelloRequest) throws -> Greeter_HelloResponse {
    sayHelloRequests.append(request)
    defer { sayHelloResponses.removeFirst() }
    return sayHelloResponses.first!
  }
  func sayHello(_ request: Greeter_HelloRequest, completion: @escaping (Greeter_HelloResponse?, CallResult) -> Void) throws -> Greeter_GreeterSayHelloCall {
    fatalError("not implemented")
  }

  var sayHelloBiCalls: [Greeter_GreeterSayHelloBiCall] = []
  func sayHelloBi(completion: ((CallResult) -> Void)?) throws -> Greeter_GreeterSayHelloBiCall {
    defer { sayHelloBiCalls.removeFirst() }
    return sayHelloBiCalls.first!
  }

}

