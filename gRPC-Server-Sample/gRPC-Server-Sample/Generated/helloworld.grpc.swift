//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: helloworld.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf


/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Greeter_GreeterProvider: ServiceProvider {
  func sayHello(request: Greeter_HelloRequest, session: Greeter_GreeterSayHelloSession) throws -> Greeter_HelloResponse
  func sayHelloBi(session: Greeter_GreeterSayHelloBiSession) throws -> ServerStatus?
}

extension Greeter_GreeterProvider {
  internal var serviceName: String { return "greeter.Greeter" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/greeter.Greeter/SayHello":
      return try Greeter_GreeterSayHelloSessionBase(
        handler: handler,
        providerBlock: { try self.sayHello(request: $0, session: $1 as! Greeter_GreeterSayHelloSessionBase) })
          .run()
    case "/greeter.Greeter/SayHelloBi":
      return try Greeter_GreeterSayHelloBiSessionBase(
        handler: handler,
        providerBlock: { try self.sayHelloBi(session: $0 as! Greeter_GreeterSayHelloBiSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Greeter_GreeterSayHelloSession: ServerSessionUnary {}

fileprivate final class Greeter_GreeterSayHelloSessionBase: ServerSessionUnaryBase<Greeter_HelloRequest, Greeter_HelloResponse>, Greeter_GreeterSayHelloSession {}

internal protocol Greeter_GreeterSayHelloBiSession: ServerSessionBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Greeter_HelloRequest?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Greeter_HelloRequest?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Greeter_HelloResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Greeter_HelloResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Greeter_GreeterSayHelloBiSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Greeter_HelloRequest? { return try self._receive(timeout: timeout) }
}

internal extension Greeter_GreeterSayHelloBiSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Greeter_HelloResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Greeter_GreeterSayHelloBiSessionBase: ServerSessionBidirectionalStreamingBase<Greeter_HelloRequest, Greeter_HelloResponse>, Greeter_GreeterSayHelloBiSession {}

